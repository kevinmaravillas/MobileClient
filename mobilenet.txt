// STILL IN PROGRESS
// some additions to the dependencies are needed in 
//  package.json and app.json
// see these in the link: https://blog.logrocket.com/build-object-classification-app-tensorflow-react-native/


import React, { useEffect, useState } from 'react';
import { View, Text, Image, Button, StyleSheet } from 'react-native';
import * as tf from '@tensorflow/tfjs';
import * as ImagePicker from 'expo-image-picker';
import * as FileSystem from 'expo-file-system';
import { decodeJpeg } from '@tensorflow/tfjs-react-native';
import * as mobilenet from '@tensorflow-models/mobilenet';




const App = () => {
  const [isTfReady, setIsTfReady] = useState(false);
  const [result, setResult] = useState('');
  const [pickedImage, setPickedImage] = useState('');


  // select an image from photo gallery and set it
  const pickImage = async () => {
    let result = await ImagePicker.launchImageLibraryAsync({
      mediaTypes: ImagePicker.MediaTypeOptions.All,
      allowsEditing: true,
      aspect: [4, 3],
      quality: 1,
    });
    if (!result.canceled) {
      setPickedImage(result.assets[0].uri);
    }
  };




  const classifyUsingMobilenet = async () => {
    
      try {
        // Load mobilenet.
        await tf.ready();
        const model = await mobilenet.load();
        setIsTfReady(true);
        console.log("starting inference with picked image: " + pickedImage)


        // Convert image to tensor
        const imgB64 = await FileSystem.readAsStringAsync(pickedImage, {
          encoding: FileSystem.EncodingType.Base64,
        });
        const imgBuffer = tf.util.encodeString(imgB64, 'base64').buffer;
        const raw = new Uint8Array(imgBuffer)
        const imageTensor = decodeJpeg(raw);


        // Classify the tensor and show the result
        const prediction = await model.classify(imageTensor);
        if (prediction && prediction.length > 0) {
          setResult(
            `${prediction[0].className} (${prediction[0].probability.toFixed(3)})`
          );
        }
      } catch (err) {
        console.log(err);
      }      
    


  };






  useEffect(() => {
    classifyUsingMobilenet()
  }, [pickedImage]);


  useEffect(() => {
    // Cleanup function
    return () => {
      tf.disposeVariables(); // Clean up tensors
      if (model) {
        model.dispose(); // Dispose of the loaded model
      }
    };
  }, []);



  return (
    <View
      style={{
        height: '100%',
        display: 'flex',
        flexDirection: 'column',
        alignItems: 'center',
        justifyContent: 'center',
      }}
    >
      {pickedImage ? (
        <Image
          source={{ uri: pickedImage }}
          style={{ width: 200, height: 200, margin: 40 }}
        />
      ) : (
        <Text>No image selected</Text>
      )}
      {isTfReady && <Button
        title="Pick an image"
        onPress={pickImage}
      /> }
      <View style={{ width: '100%', height: 20 }} />
      {!isTfReady && <Text>Loading TFJS model...</Text>}
      {isTfReady && result === '' && <Text>Pick an image to classify!</Text>}
      {result !== '' && <Text>{result}</Text>}
    </View>
  );
};


export default App;
